#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app'),
  router = require('express').Router(),
  http = require('http'),
  config = require('../config'),
  env = require('../env');


/** home route to check if server is working fine */
app.use('/', router.get('/', (req, res, next) => {
  res.send('Server running.');
}));

/** express joi validation message handler */
app.use((err, req, res, next) => {
  if (err && err.error && err.error.isJoi) {
    let errorMessages = [];
    if (err.error.details && err.error.details.length) {
      let errorMessage;
      err.error.details.forEach(ele => {
        errorMessage = ele.message;
        errorMessage = errorMessage.replace(/"/g, '');
        errorMessage = errorMessage.replace('[', '');
        errorMessage = errorMessage.replace(']', '');
        errorMessages.push(errorMessage);
      });
    }
    let errMsg = errorMessages.length === 0 ? "Validation error." : errorMessages.join(', ');
    res.status(400).json({ message: errMsg });
  } else {
    // pass on to another error handler
    next(err);
  }
});

/** Not found route */
app.use((req, res) =>
  res.status(404).json({
    message: 'Not found.'
  })
);

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config[env.instance].port || process.env.PORT || '3000'),
  host = config[env.instance].host;
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, host);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log(`Server running at http://${host}:${port}`);
}
